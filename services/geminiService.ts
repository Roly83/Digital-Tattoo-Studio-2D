import { GoogleGenAI } from "@google/genai";
import { TATTOO_STYLE_PROMPTS } from '../constants';
import { TattooStyle } from '../types';

if (!process.env.API_KEY) {
  console.warn("API_KEY environment variable not set. AI features will not work.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

export const generateTattooImage = async (
  prompt: string,
  style: TattooStyle
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("Gemini API key is not configured.");
  }
  
  const stylePrompt = TATTOO_STYLE_PROMPTS[style];
  const fullPrompt = `A clean, high-resolution tattoo design of ${prompt}, in a ${style} style. ${stylePrompt}. The design should be on a plain white background, centered, with no shadows or context.`;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: fullPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '1:1',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    throw new Error("Failed to generate AI tattoo image.");
  }
};
